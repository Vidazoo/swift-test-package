// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name testSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
import Swift
import SwiftUI
import WebKit
import _Concurrency
import _StringProcessing
@_exported import testSDK
public enum WidgetEvents : Swift.String {
  case Mute
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct VidazooWidget : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public let widgetId: Swift.String
  @_Concurrency.MainActor(unsafe) public init(widgetId: Swift.String)
  @_Concurrency.MainActor(unsafe) public func pause()
  @_Concurrency.MainActor(unsafe) public func play()
  @_Concurrency.MainActor(unsafe) public func on(_ event: testSDK.WidgetEvents, callback: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7testSDK13VidazooWidgetV4bodyQrvp", 0) __
}
extension testSDK.WidgetEvents : Swift.Equatable {}
extension testSDK.WidgetEvents : Swift.Hashable {}
extension testSDK.WidgetEvents : Swift.RawRepresentable {}
